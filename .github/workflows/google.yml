import React from "react";
xport default function AboutMe() {
  return (
    <div className="min-h-screen bg-gradient-to-b from-indigo-50 to-white text-gray-800 p-6 font-sans">
      <div className="max-w-3xl mx-auto bg-white shadow-2xl rounded-2xl p-8 mt-10 border border-indigo-100">
        <h1 className="text-4xl font-bold text-indigo-700 mb-4">Duha Khalifeh</h1>
        <h2 className="text-xl text-indigo-500 font-semibold mb-6">
          Empowering Minds through Inclusive Tech
        </h2>

        <p className="text-lg leading-relaxed mb-4">
          My professional journey began with a license in Auditing, and I have since 
          earned various international certificates in development and artificial intelligence, 
          including Google badges. I am passionate about continuous learning and 
          empowering others through education and technology.
        </p>

        <p className="text-lg leading-relaxed mb-4">
          I specialize in inclusive education for people with disabilities and have experience 
          working as a private tutor. I’m also an active volunteer in women’s rights initiatives 
          and currently lead <span className="font-semibold">D-TechRise</span>, a digital empowerment project 
          that leverages AI to create meaningful change.
        </p>

        <p className="text-lg leading-relaxed mb-4">
          Through my work, I aim to bridge gaps in access and opportunity—using technology as 
          a tool to uplift, educate, and inspire.
        </p>

        <div className="mt-6">
          <h3 className="text-lg font-semibold text-indigo-600 mb-2">Connect with Me:</h3>
          <ul className="space-y-1 text-indigo-500">
            <li>Email: <a href="mailto:your-email@example.com" className="underline">your-email@example.com</a></li>
            <li>LinkedIn: <a href="https://www.linkedin.com/in/yourprofile" className="underline">linkedin.com/in/yourprofile</a></li>
            <li>GitHub: <a href="https://github.com/yourgithub" className="underline">github.com/yourgithub</a></li>
          </ul>
        </div>
      </div>
    </div>
  );
}
/my-pool/providers/my-provider' # TODO: update to your workload identity provider

jobs:
  setup-build-publish-deploy:
    name: 'Setup, Build, Publish, and Deploy'
    runs-on: 'ubuntu-latest'
    environment: 'production'

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4

      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: 'Docker Auth'
        uses: 'docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567' # docker/login-action@v3
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.auth_token }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      # Get the GKE credentials so we can deploy to the cluster
      - name: 'Set up GKE credentials'
        uses: 'google-github-actions/get-gke-credentials@6051de21ad50fbb1767bc93c11357a49082ad116' # google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: '${{ env.GKE_CLUSTER }}'
          location: '${{ env.GKE_ZONE }}'

      # Build the Docker image
      - name: 'Build and push Docker container'
        run: |-
          DOCKER_TAG="${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPOSITORY}/${IMAGE}:${GITHUB_SHA}"

          docker build \
            --tag "${DOCKER_TAG}" \
            --build-arg GITHUB_SHA="${GITHUB_SHA}" \
            --build-arg GITHUB_REF="${GITHUB_REF}" \
            .

          docker push "${DOCKER_TAG}"

      # Set up kustomize
      - name: 'Set up Kustomize'
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.3/kustomize_v5.4.3_linux_amd64.tar.gz
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: 'Deploy to GKE'
        run: |-
          # replacing the image name in the k8s template
          ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide
